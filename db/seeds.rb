ActsAsTaggableOn::Tagging.create!([
  {tag_id: 1, taggable_type: "Post", taggable_id: 1, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 2, taggable_type: "Post", taggable_id: 1, tagger_type: nil, tagger_id: nil, context: "tags"}
])
ActsAsTaggableOn::Tag.create!([
  {name: "Java", taggings_count: 1},
  {name: "Java 9", taggings_count: 1}
])
Post.create!([
  {title: "Whats new in Java 9", body: "![](https://viblo.asia/uploads/c385c91d-e59a-4d48-a7c9-58c6be6871de.jpg)\r\n\r\nJava 9—is now available for developers. we already heard about Java 9’s module system, but there's even more to this new version. Here are some exciting new features that will ship with Java 9.\r\n\r\n## Module system:\r\nIf you are familiar with languages like Ruby or Python, you must have some idea about the module system. Java 9’s modularity is supposed to let developers more easily assemble and maintain sophisticated applications. Also, it should make Java better to scale and one can easily add more functionaly to a class without extending anything. Check this [oracle documentataion](https://www.oracle.com/corporate/features/understanding-java-9-modules.html) for better understanding of module in java.\r\n\r\n![](https://viblo.asia/uploads/6d532499-725d-4f39-8d41-ec5ce3af5432.jpg)\r\n\r\n## JShell: the interactive Java REPL\r\nMany languages already feature an interactive shell play with, and Java now joins this club. You can launch jshell from the console and directly start typing and executing Java code. The immediate feedback of jshell makes it a great tool to explore APIs and try out language features.\r\n\r\n![](https://viblo.asia/uploads/3bef3a6f-a1ed-4f00-a9a8-fe0bc7b17dfe.png)\r\n\r\n## Collection factory methods\r\nOften you want to create a collection (e.g., a List or Set) in your code and directly populate it with some elements.  With Java 9, several collection factory methods have been added:\r\n\r\n```\r\nSet<Integer> ints = Set.of(1, 2, 3);\r\nList<String> strings = List.of(\"first\", \"second\");\r\n```\r\n\r\n\r\n##  Stream API improvements\r\nThere are some new methods added to the Stream interface: dropWhile, takeWhile, ofNullable. The iterate method gets a new overload, allowing you to provide a Predicate on when to stop iterating:\r\n\r\n```\r\nIntStream.iterate(1, i -> i < 100, i -> i + 1).forEach(System.out::println);\r\n```\r\n\r\n## Private interface methods\r\n If you have several default methods on an interface with code that does almost the same thing? Normally, you'd refactor those methods to call a private method containing the shared functionality. But default methods can't be private. Creating another default method with the shared code is not a solution, because this helper method becomes part of the public API. With Java 9, you can add private helper methods to interfaces to solve this problem:\r\n \r\n```\r\n public interface MyInterface {\r\n\r\n    void normalInterfaceMethod();\r\n\r\n    default void interfaceMethodWithDefault() {  init(); }\r\n\r\n    default void anotherDefaultMethod() { init(); }\r\n\r\n    // This method is not part of the public API exposed by MyInterface\r\n    private void init() { System.out.println(\"Initializing\"); }\r\n}\r\n```\r\n\r\n\r\n### References:\r\nhttps://www.infoworld.com/article/3227244/java/java-9-is-here-everything-you-need-to-know.html\r\nhttps://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6\r\nhttp://www.baeldung.com/new-java-9", slug: "whats-new-in-java-9"}
])
