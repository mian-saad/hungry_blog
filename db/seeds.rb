ActsAsTaggableOn::Tag.create!([
  {name: "Ruby on rails", taggings_count: 4},
  {name: "Bootstrap", taggings_count: 1},
  {name: "Theme", taggings_count: 1},
  {name: "Template", taggings_count: 1},
  {name: "Integration", taggings_count: 1},
  {name: "Active Record", taggings_count: 1},
  {name: "Transaction Lock", taggings_count: 1},
  {name: "Rspec", taggings_count: 1},
  {name: "Artificial intelligence", taggings_count: 1},
  {name: "Machine Learning", taggings_count: 1},
  {name: "AI", taggings_count: 1},
  {name: "RESTful", taggings_count: 1},
  {name: "Api", taggings_count: 1},
  {name: "Grape", taggings_count: 1},
  {name: "Swagger", taggings_count: 1},
  {name: "JavaScript", taggings_count: 1},
  {name: "Shell Script", taggings_count: 1},
  {name: "Linux", taggings_count: 1},
  {name: "Java", taggings_count: 1},
  {name: "Java 9", taggings_count: 1}
])
ActsAsTaggableOn::Tagging.create!([
  {tag_id: 1, taggable_type: "Post", taggable_id: 7, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 2, taggable_type: "Post", taggable_id: 7, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 3, taggable_type: "Post", taggable_id: 7, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 4, taggable_type: "Post", taggable_id: 7, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 5, taggable_type: "Post", taggable_id: 7, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 1, taggable_type: "Post", taggable_id: 6, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 6, taggable_type: "Post", taggable_id: 6, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 7, taggable_type: "Post", taggable_id: 6, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 8, taggable_type: "Post", taggable_id: 6, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 9, taggable_type: "Post", taggable_id: 3, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 10, taggable_type: "Post", taggable_id: 3, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 11, taggable_type: "Post", taggable_id: 3, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 1, taggable_type: "Post", taggable_id: 2, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 12, taggable_type: "Post", taggable_id: 2, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 13, taggable_type: "Post", taggable_id: 2, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 14, taggable_type: "Post", taggable_id: 2, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 15, taggable_type: "Post", taggable_id: 2, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 1, taggable_type: "Post", taggable_id: 4, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 16, taggable_type: "Post", taggable_id: 4, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 17, taggable_type: "Post", taggable_id: 5, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 18, taggable_type: "Post", taggable_id: 5, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 19, taggable_type: "Post", taggable_id: 1, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 20, taggable_type: "Post", taggable_id: 1, tagger_type: nil, tagger_id: nil, context: "tags"}
])
Post.create!([
  {created_at: 10.minutes.ago, title: "Whats new in Java 9", body: "![](https://viblo.asia/uploads/c385c91d-e59a-4d48-a7c9-58c6be6871de.jpg)\r\n\r\nJava 9—is now available for developers. we already heard about Java 9’s module system, but there's even more to this new version. Here are some exciting new features that will ship with Java 9.\r\n\r\n## Module system:\r\nIf you are familiar with languages like Ruby or Python, you must have some idea about the module system. Java 9’s modularity is supposed to let developers more easily assemble and maintain sophisticated applications. Also, it should make Java better to scale and one can easily add more functionaly to a class without extending anything. Check this [oracle documentataion](https://www.oracle.com/corporate/features/understanding-java-9-modules.html) for better understanding of module in java.\r\n\r\n![](https://viblo.asia/uploads/6d532499-725d-4f39-8d41-ec5ce3af5432.jpg)\r\n\r\n## JShell: the interactive Java REPL\r\nMany languages already feature an interactive shell play with, and Java now joins this club. You can launch jshell from the console and directly start typing and executing Java code. The immediate feedback of jshell makes it a great tool to explore APIs and try out language features.\r\n\r\n![](https://viblo.asia/uploads/3bef3a6f-a1ed-4f00-a9a8-fe0bc7b17dfe.png)\r\n\r\n## Collection factory methods\r\nOften you want to create a collection (e.g., a List or Set) in your code and directly populate it with some elements.  With Java 9, several collection factory methods have been added:\r\n\r\n```\r\nSet<Integer> ints = Set.of(1, 2, 3);\r\nList<String> strings = List.of(\"first\", \"second\");\r\n```\r\n\r\n\r\n##  Stream API improvements\r\nThere are some new methods added to the Stream interface: dropWhile, takeWhile, ofNullable. The iterate method gets a new overload, allowing you to provide a Predicate on when to stop iterating:\r\n\r\n```\r\nIntStream.iterate(1, i -> i < 100, i -> i + 1).forEach(System.out::println);\r\n```\r\n\r\n## Private interface methods\r\n If you have several default methods on an interface with code that does almost the same thing? Normally, you'd refactor those methods to call a private method containing the shared functionality. But default methods can't be private. Creating another default method with the shared code is not a solution, because this helper method becomes part of the public API. With Java 9, you can add private helper methods to interfaces to solve this problem:\r\n \r\n```\r\n public interface MyInterface {\r\n\r\n    void normalInterfaceMethod();\r\n\r\n    default void interfaceMethodWithDefault() {  init(); }\r\n\r\n    default void anotherDefaultMethod() { init(); }\r\n\r\n    // This method is not part of the public API exposed by MyInterface\r\n    private void init() { System.out.println(\"Initializing\"); }\r\n}\r\n```\r\n\r\n\r\n### References:\r\nhttps://www.infoworld.com/article/3227244/java/java-9-is-here-everything-you-need-to-know.html\r\nhttps://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6\r\nhttp://www.baeldung.com/new-java-9", slug: "whats-new-in-java-9"},
  {created_at: 4.minutes.ago, title: "RESTful API with Grape gem", body: "In this post we'll make a Rails API using Grape gem. And we'll also attach Swagger UI with it to get a nice API interface to play with.\r\n\r\nSo what is Grape? I can quote directly from their official docs,\r\n\r\nGrape is a REST-like API framework for Ruby. It's designed to run on Rack or complement existing web application frameworks such as Rails and Sinatra by providing a simple DSL to easily develop RESTful APIs. It has built-in support for common conventions, including multiple formats, subdomain/prefix restriction, content negotiation, versioning and much more.\r\n\r\nWe'll make two api for our user model. One POST api for creating a user and one GET api for get a user info.\r\n\r\nLets start by adding grape gem in our Gemfile.\r\n\r\n```Ruby\r\ngem \"grape\"\r\n```\r\n\r\nMake a folder named api inside our app/controller folder and create a new file base.rb  inside this folder.\r\n\r\nGrape APIs are Rack applications that are created by subclassing the API modules under Grape::API. So lets define our base class in base.rb file.\r\n\r\n```Ruby\r\nmodule API\r\n  class Base < Grape::API\r\n    mount API::V1::Base\r\n  end\r\nend\r\n```\r\n\r\nHere we define our API module and wrote a class Base which is inheriting Grape::API. We use mount to tell Rails that our API locates here. If you dont know about mount or engine already take a look here.http://guides.rubyonrails.org/engines.html\r\n\r\nAs Grape supports versioning, we can make a version friendly structure for our API. So we're going to make another folder v1 inside the api folder. For future version we can create v2, v3 and so on.\r\n\r\nInside v1 folder we'll create another base.rb file. This file will be used for mounting all the API classes that will nest inside v1 folder. Lets put these code here,\r\n\r\n```Ruby\r\nmodule API\r\n  module V1\r\n    class Base < Grape::API\r\n      mount API::V1::Users\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nHere we already mount our upcoming api class Users. So make another file users.rb inside v1 folder. In this file we'll write our API for users.\r\n\r\n```Ruby\r\nmodule API\r\n  module V1\r\n    class Users < Grape::API\r\n      include API::V1::Defaults\r\n\r\n        desc \"Create user\"\r\n        params do\r\n          requires :name, type: String\r\n        end\r\n        post \"/create\" do\r\n          User.create! name: permitted_params[:name]\r\n        end\r\n\r\n        desc \"Get a user\"\r\n        params do\r\n          requires :id, type: Integer\r\n        end\r\n        post \"/login\" do\r\n          User.find_by! id: permitted_params[:id]\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nAs you can see our first api takes a POST request with a param :name. We define this param type as string. If someone call this api without this param Grape will send back a error message. More info about params can be found in their nice documentation here. https://github.com/ruby-grape/grape#parameters\r\nWhen this api will be called with name param we will take the param and create a new user.\r\n\r\nAnd the second api takes a GET request with a integer param :id. We'll use the id param to find the user and give a json response containing user info. We'll use a serializer for this after a while.\r\n\r\nAt the top of our class you can see I include a Defaults  class. We'll use this class to define some helper methods. Create a new file defaults.rb inside v1 folder.\r\n\r\n```Ruby\r\nmodule API\r\n  module V1\r\n    module Defaults\r\n      extend ActiveSupport::Concern\r\n\r\n      included do\r\n        prefix \"api\"\r\n        version \"v1\", using: :path\r\n        default_format :json\r\n        format :json\r\n        formatter :json, Grape::Formatter::ActiveModelSerializers\r\n\r\n        helpers do\r\n          def permitted_params\r\n            @permitted_params ||= declared(params, include_missing: false)\r\n          end\r\n        end\r\n\r\n        rescue_from ActiveRecord::RecordNotFound do |e|\r\n          error_response(message: e.message, status: 404)\r\n        end\r\n\r\n        rescue_from ActiveRecord::RecordInvalid do |e|\r\n          error_response(message: e.message, status: 422)\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nHere I declare a helper method permitted params which will be useful to identify those params which we mentioned in our api. We extend ActiveSupport::Concern class to handle the error events. We'll send error response in case if there is any error to create or find the user.\r\n\r\nYou can see at top we declare some basic settings which are mentioned in grape documents. And as a json formatter we choose ActiveModelSerializers. To use this we need to add this gem in our Gemfile.\r\n\r\n```Ruby\r\ngem 'grape-active_model_serializers'\r\n```\r\n\r\nNow write a serializer for our user model. Create user_serializer.rb inside app/serializers folder and add this codes.\r\n\r\n```Ruby\r\nclass GraduateSerializer < ActiveModel::Serializer\r\n  attributes :id, :name\r\nend\r\n```\r\n\r\nWe define these two attributes to show in our api response.\r\n\r\nTo access the api we need to initialize it in our router.\r\n\r\n```Ruby\r\nRails.application.routes.draw do\r\n  mount API::Base, at: \"/\"\r\nend\r\n```\r\n\r\nAnd for cross origin resource sharing we'll use rack-cors gem. Add this in gemfile.\r\n\r\n```Ruby\r\ngem 'rack-cors', :require => 'rack/cors'\r\n```\r\n\r\nAnd add this code to your config/application.rb file.\r\n\r\n```Ruby\r\nmodule Api\r\n  class Application < Rails::Application\r\n    config.middleware.use Rack::Cors do\r\n      allow do\r\n        origins \"*\"\r\n        resource \"*\", headers: :any, methods: [:get,\r\n            :post, :put, :delete, :options]\r\n      end\r\n    end\r\n    config.active_record.raise_in_transactional_callbacks = true\r\n  end\r\n```\r\n\r\nPretty much done. Finally we can add another gem for swagger documentation support.\r\n\r\n```Ruby\r\ngem \"grape-swagger-rails\"\r\n```\r\n\r\nGo to app/controllers/api/v1/base.rb and put some lines to  enable swagger.\r\n\r\n```Ruby\r\nrequire \"grape-swagger\"\r\n\r\nmodule API\r\n  module V1\r\n    class Base < Grape::API\r\n      mount API::V1::Users\r\n\r\n      add_swagger_documentation(\r\n        api_version: \"v1\",\r\n        hide_documentation_path: true,\r\n        mount_path: \"/api/v1/swagger_doc\",\r\n        hide_format: true\r\n      )\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nWe also need to define a route for this in the config/routes.rb file.\r\n\r\n```Ruby\r\nmount GrapeSwaggerRails::Engine, at: \"/documentation\"\r\n```\r\n\r\nNow start the rails server and go to http://localhost/documentation.\r\nIn the url area filled it with our mounted path: http://localhost:3000/api/v1/swagger_doc\r\nAnd we're done. We got our two api with nice documentation ready to go.", slug: "restful-api-with-grape-gem"},
  {created_at: 3.minutes.ago, title: "What is Machine Learning", body: "![ml-robot.png](https://viblo.asia/uploads/54b5317e-0b23-4e2e-b4a6-4baa3682607c.png)\r\n\r\n### What is machine learning?\r\n\r\nIn one sentence, Machine learning is a type of artificial intelligence (AI) that provides computers with the ability to learn without being explicitly programmed.\r\n\r\nBut this bookish defination is not enough to understand it clearly. So lets clearify it little more.\r\n\r\nIn order to solve a problem using computer, we need an algorithm. Generally an algorithm\r\nis a sequence of instructions that takes some input and gives you your desired output.\r\n\r\nFor example, one can write an algorithm for sorting. The input is a set of numbers and the output is their ordered list. For the same task, there may be various algorithms and we may be interested in finding the most efficient one.\r\n\r\nFor some tasks, however, we do not have an algorithm—for example, identifying the spam email from the legitimate emails. We know what the input is: an email document that in the simplest case is a file of characters. We know what the output should be: a yes/no output indicating whether the\r\nmessage is spam or not. But We do not know how to transform the input to the output.\r\n\r\nThis is the case where Machine Learning comes in. What we lack in knowledge, we make up for in data. We can easily compile thousands of example messages some of which we know to be spam and what we want is to “learn” what consititutes spam from them. In other words, we would like the computer (machine) to extract automatically\r\nthe algorithm for this task.\r\n\r\nApplication of machine learning methods to large databases is called\r\ndata mining. But machine learning is not just a database problem; it is also a part of artificial intelligence. To be intelligent, a system that is in a changing environment should have the ability to learn. If the system can learn and adapt to such changes, the system designer need not foresee and provide solutions for all possible situations.\r\n\r\n### Where can we use it?\r\n\r\nMachine learning can helps us find solutions to many problems in object recognition (Google glass), driverless car, speech recognition (Siri and Google now), and of course robotics.\r\n\r\nLet us take the example of recognizing faces: This is a task we do effortlessly; every day we recognize people by looking at their faces or from their photographs, despite differences in pose, lighting, hair style, and so forth.\r\n\r\nBut we do it unconsciously and are unable to explain how we do it. Because\r\nwe are not able to explain our expertise, we cannot write the computer program. At the same time, we know that a face has structure. It is symmetric. There are the eyes, the nose, the mouth, located in certain places on the face.\r\n\r\n![facialrecognition_1-800x420.jpg](https://viblo.asia/uploads/1990e870-031f-4520-b0be-d4307449e4af.jpg)\r\n\r\nEach person’s face is a pattern composed of a particular combination\r\nof these. By analyzing sample face images of a person, a learning program\r\ncaptures the pattern specific to that person and then recognizes by\r\nchecking for this pattern in a given image. This is one example of pattern\r\nrecognition.\r\n\r\nThere are a number of examples like credit card fraud detection, snail mail routing, quantitative trading, market segmentation analysis, demand prediction for inventory control, and other things. It is also used for scientific data analysis in several areas, with bioinformatics being the really big one.\r\n\r\n### Different Examples of Machine Learning Applications\r\n\r\n### Learning Associations\r\n\r\n![Amazon_Funny-300x249.jpg](https://viblo.asia/uploads/28b99c8f-b966-416b-b79a-c56e0c2e18d1.jpg)\r\n\r\nLets think of a supermarket chain—one application\r\nof machine learning is basket analysis, which is finding associations between\r\nproducts bought by customers: If people who buy X typically also\r\nbuy Y, and if there is a customer who buys X and does not buy Y, he\r\nor she is a potential Y customer. Once we find such customers, we can\r\ntarget them for cross-selling.\r\n\r\nassociation rule In finding an association rule, we are interested in learning a conditional\r\nprobability of the form P(Y|X) where Y is the product we would like to\r\ncondition on X, which is the product or the set of products which we\r\nknow that the customer has already purchased.\r\n\r\nLet us say, going over our data, we calculate that P(chips|beer) = 0.7.\r\nThen, we can define the rule:\r\n70 percent of customers who buy beer also buy chips.\r\n\r\nWe may want to make a distinction among customers and toward this,\r\nestimate P(Y|X,D) where D is the set of customer attributes, for example,\r\ngender, age, marital status, and so on, assuming that we have access\r\nto this information. If this is a bookseller instead of a supermarket, products\r\ncan be books or authors. In the case of a Web portal, items correspond\r\nto links to Web pages, and we can estimate the links a user is likely\r\nto click and use this information to download such pages in advance for\r\nfaster access.\r\n\r\n### Classification\r\n\r\n ![pic1.jpg](https://viblo.asia/uploads/322ab212-f66c-40e1-9503-07b6de1c4e7a.jpg)\r\n\r\nA credit is an amount of money loaned by a financial institution, for\r\nexample, a bank, to be paid back with interest, generally in installments.\r\nIt is important for the bank to be able to predict in advance the risk\r\nassociated with a loan, which is the probability that the customer will\r\ndefault and not pay the whole amount back. This is both to make sure\r\nthat the bank will make a profit and also to not inconvenience a customer\r\nwith a loan over his or her financial capacity.\r\n\r\nThis is an example of a classification problem where there are two\r\nclasses: low-risk and high-risk customers. The information about a customer\r\nmakes up the input to the classifier whose task is to assign the\r\ninput to one of the two classes.\r\nAfter training with the past data, a classification rule learned may be\r\nof the form\r\n\r\nIF income> θ1 AND savings> θ2 THEN low-risk ELSE high-risk\r\n\r\nThis is an example of\r\ndiscriminant a discriminant; it is a function that separates the examples of different\r\nclasses.\r\nOnce we have a rule that fits the past data, if the future is similar to the past, then we\r\ncan make correct predictions for novel instances. Given a new application\r\nwith a certain income and savings, we can easily decide whether it is lowrisk\r\nor high-risk.\r\n\r\n### Regression\r\n\r\nLet us say we want to have a system that can predict the price of a used\r\ncar. Inputs are the car attributes—brand, year, engine capacity, mileage,\r\nand other information—that we believe affect a car’s worth. The output\r\nis the price of the car. Such problems where the output is a number are\r\nregression problems.\r\n\r\nLet X denote the car attributes and Y be the price of the car. Again\r\nsurveying the past transactions, we can collect a training data and the\r\nmachine learning program fits a function to this data to learn Y as a\r\nfunction of X. So the fitted function is of the form\r\ny = wx + w0\r\n\r\nBoth regression and classification are supervised learning problems\r\nwhere there is an input, X, an output, Y, and the task is to learn the mapping\r\nfrom the input to the output.\r\n\r\n### Unsupervised Learning\r\n\r\nIn supervised learning, the aim is to learn a mapping from the input to\r\nan output whose correct values are provided by a supervisor. In unsupervised\r\nlearning, there is no such supervisor and we only have input data.\r\nThe aim is to find the regularities in the input. There is a structure to the\r\ninput space such that certain patterns occur more often than others, and\r\nwe want to see what generally happens and what does not. In statistics,\r\nthis is called density estimation.\r\n\r\nOne method for density estimation is clustering where the aim is to\r\nfind clusters or groupings of input.\r\n\r\nAn interesting application of clustering is in image compression. In this case, the input instances are image pixels represented as RGB values. A clustering program groups pixels with similar colors in the same group, and such groups correspond to the colors occurring frequently in the image. If in an image, there are only shades of a small number of\r\ncolors, and if we code those belonging to the same group with one color,\r\nfor example, their average, then the image is compressed.\r\n\r\n![51c0b4e42094987971be43849084c6d9.jpg](https://viblo.asia/uploads/039e8295-f37b-44f7-a3ab-cd7d3eeeb1c4.jpg)\r\n\r\nLet us say the pixels are 24 bits to represent 16 million colors, but if there are shades\r\nof only 64 main colors, for each pixel we need 6 bits instead of 24. For\r\nexample, if the scene has various shades of blue in different parts of the\r\nimage, and if we use the same average blue for all of them, we lose the\r\ndetails in the image but gain space in storage and transmission.\r\n\r\nIdeally, one would like to identify higher-level regularities by analyzing repeated\r\nimage patterns, for example, texture, objects, and so forth. This allows a\r\nhigher-level, simpler, and more useful description of the scene, and for\r\nexample, achieves better compression than compressing at the pixel level.\r\n\r\n**References:**\r\n> https://www.amazon.com/Machine-Learning-Tom-M-Mitchell/dp/0070428077/\r\n> https://www.amazon.com/Introduction-Machine-Learning-Adaptive-Computation/dp/026201243X\r\n> http://whatis.techtarget.com/definition/machine-learning\r\n\r\n", slug: "what-is-machine-learning"},
  {created_at: 5.minutes.ago, title: "JavaScript in Rails", body: "![ruby-bootcamp.gif](https://viblo.asia/uploads/bdc797f1-80f1-4130-9d70-3dc18a63dc3d.gif)\r\n\r\nIts needless to say the importance of JavaScript in web applications. Because Websites are becoming more and more dependent on Javascript.\r\n\r\nThere are many ways to add JavaScript in Rails. But the question is what is the best way to add JS in our Rails app that will ensure the optimum performance and will be easily managable for the developers.\r\n\r\nFrom Rails 3.1 we have the asset pipeline that improves website performance by concatenating multiple JavaScript files into a single script. That gives the developer freedom to write JS codes in different files and also increase performance by eliminating multiple `<script>` request.\r\n\r\nWith it we can organize multiple JavaScript files in the app/assets/javascripts folder.\r\napp/assets/javascripts/application.js file works as a manifest file, let us specify which js or coffescript files we want to specify.\r\n\r\n```Ruby\r\n//= require jquery\r\n//= require jquery_ujs\r\n//= require_tree .\r\n```\r\n\r\nBy default, it has //= require_tree which will includes all JavaScript files in the app/assets/javascripts directory. With the power of rails asset pipline all the Js files specified will merged into single application.js script. So we need to specify only one js file in our layout, with this statement.\r\n\r\n```Ruby\r\n<%= javascript_include_tag \"application\" %>\r\n```\r\n\r\nTo know what more Rails asset pipeline can do visit here: http://guides.rubyonrails.org/asset_pipeline.html\r\n\r\nWhether we use Rails asset pipeline or use the `<script>` tag directly in the view file, we have to find a way to store all the JS files in the directory in such a way that it will be easily managable later.\r\n\r\nIn Rails, normally we have 3 directories to store the js files.\r\n 1. app/assets/javascripts directory\r\n 2. lib/assets/javascripts directory\r\n 3. vendor/assets/javascripts directory\r\n\r\nThe first one we use to store the Js files that we have created for our application.\r\nThe second location to store Js files that will also use in some other applications.\r\nAnd the third one for storing the plugins/script from third party.\r\n\r\nIf we use the second or third directory and want to use them in whole app, we must need to specify that in the applications.js manifest.\r\n\r\nFor organizing our scripts, there are many ways to do this. The Paloma gem offers an easy way to organize JavaScript files using the Rails asset pipeline. It also provides a capability to execute page-specific JavaScript.\r\n\r\nTo manage with Paloma gem, we need to specify it in the application.js file.\r\n\r\n```Ruby\r\n//= require paloma\r\n```\r\n\r\nIt makes page-specific javascript very easy. Suppose we have a model Product and ProductsController. In the controller we have a method index and we want some javascript function to work only for that method.\r\n\r\nSo our controller will looks like,\r\n\r\n```Ruby\r\ndef ProductsController < ApplicationController\r\n  def index\r\n    @products = Product.all\r\n  end\r\nend\r\n\r\n```\r\n\r\nAnd in our JS files we can write it like this,\r\n\r\n```Ruby\r\nPaloma.controller('Products', {\r\n  index: function(){\r\n    alert(\"script for Index method Working.\");\r\n  }\r\n});\r\n```\r\n\r\nSo, now our small javascript code will only execute when the index method will be called.\r\nVery easy to use, right?\r\n\r\nTo know more about this gem: https://github.com/kbparagua/paloma\r\n\r\nWe'll talk about more ways in the next post.\r\n\r\n", slug: "javascript-in-rails"},
  {created_at: 6.minutes.ago, title: "Introduction to ShellScript", body: "![](https://viblo.asia/uploads/3f10d137-fbed-44b6-b28c-09e0881a96dd.png)\r\nAre you a Linux user? If yes, you must be familiar with a black-board look-a-like thing called command-line.\r\n\r\nBeing a Linux user means you must play around with the command-line. Like it or not, there are just some things that are done much more easily via this interface than by pointing and clicking. The more you use and learn the command-line, the more you see its potential. \r\n\r\nNow, some of you who used Windows before using Linux may remember batch files. These were little text files that you could fill with commands to execute and Windows would run them in turn.\r\n\r\n\r\n## What is Shell?\r\nA Shell provides you with an interface to the Unix system. It gathers input from you and executes programs based on that input. When a program finishes executing, it displays that program's output.\r\n\r\nShell is an environment in which we can run our commands, programs, and also the shell scripts. There are different flavors of a shell, just as there are different flavors of operating systems. Each flavor of shell has its own set of recognized commands and functions.\r\n\r\n\r\n## What is Shell Script?\r\nBasically script is a list of commands, which are listed in the order of execution. They also allow for far more useful functions, such as command substitution. You can invoke a command, like date, and use it’s output as part of a file-naming scheme. \r\n\r\nYou can automate backups and each copied file can have the current date appended to the end of its name. Scripts aren’t just invocations of commands, either. They’re programs in their own right. Scripting allows you to use programming functions – such as ‘for’ loops, if/then/else statements, and so forth – directly within your operating system’s interface.\r\n\r\n\r\n## My First Shell Script\r\nAt first create a new file with `.sh` extension, like `hello_world.sh`\r\nScripts are executed like programs, and in order for this to happen they need to have the proper permissions. \r\n\r\nNow to make our shell script executable just use `chmod +` command,\r\n\r\n```shell\r\n$ chmod +x hello_world.sh\r\n```\r\n\r\nNow we are ready to write our first shell script. Before that, there are a few guidelines you need to know.\r\n\r\n1. Every script should being with `#!/bin/bash`\r\n2. Every new line is a new command\r\n3. Comment lines start with a #\r\n4. Commands are surrounded by ()\r\n\r\n\r\nNow we will write a simple script, that will read one input `(:name)` from keyboard and say hello to that person.\r\n\r\n```shell\r\n#!/bin/sh\r\necho \"Input your name?\"\r\nread PERSON\r\necho \"Hello, $PERSON\"\r\n```\r\n\r\nLets execute our shell script like this,\r\n\r\n```shell\r\n$ ./hello_world.sh\r\n```\r\n\r\nIs it working? I bet yes. \r\nIn our second script `odd_even.sh` we will a for loop and if..else statement to printout Odd and Even numbers in a range.\r\n\r\n```shell\r\n#!/bin/bash\r\nfor n in {1..6}\r\ndo\r\n   out=$(( $n % 2 ))\r\n   if [ $out -eq 0 ]\r\n   then\r\n      echo \"$n is EVEN\"\r\n   else\r\n      echo \"$n is ODD\"\r\n   fi\r\ndone\r\n```\r\noutput:\r\n\r\n```shell\r\n1 is ODD\r\n2 is EVEN\r\n3 is ODD\r\n4 is EVEN\r\n5 is ODD\r\n6 is EVEN\r\n```\r\n\r\nGreat! Now we know how to use loop, decision making and simple arithmetic in a shell script.\r\nWant to see something in shell.\r\nRun this command,\r\n\r\n```shell\r\n$ telnet towel.blinkenlights.nl\r\n```\r\n\r\nReferences:\r\n> https://www.tutorialspoint.com/unix/index.htm\r\n> https://www.howtogeek.com/67469/the-beginners-guide-to-shell-scripting-the-basics/\r\n> https://www.javatpoint.com/shell-scripting-tutorial", slug: "introduction-to-shellscript"},
  {created_at: 2.minutes.ago, title: "ActiveRecord TransactionLock and Testing", body: "![Screenshot from 2016-03-22 17:41:35.png](https://viblo.asia/uploads/4aed9511-fb4b-4da1-8e14-9f5bc45af6df.png)\r\n\r\nTransaction Locking is helpful for preventing race conditions when updating records in the database and ensuring atomic updates. It ensures the ACID Properties.\r\n\r\n### ACID Properties of Transactions\r\n\r\nAtomicity, Consistency, Isolation, and Durability are the main properties of a transaction operation. These properties are related and should be considered together. Each of these properties described in detaill below.\r\n\r\n**Atomicity**\r\n\r\nTransaction is a combination of multiple separate actions. And Atomicity ensure that either all the operations should be finished successfully or none of the operation will make effect in the database.\r\n\r\n**Consistency**\r\n\r\nIt means that transaction will change the state of the database from one consistent state no another consistent state. And transaction cant break this consistency rules.\r\n\r\n**Isolation**\r\n\r\nAny changes made in any step of the transaction cant be visible to one another until the full transaaction process complete. it can be implemented differently in different database.\r\n\r\n**Durability**\r\n\r\nIf transaction completed successfully, the result cant be lost even in abnormal crash of the program. Once commited, the data cant be lost and result cant be undo.\r\n\r\nActive Record provides two locking mechanisms:\r\n\r\n1.Optimistic Locking\r\n\r\n2.Pessimistic Locking\r\n\r\n### Optimistic Locking\r\n\r\nWith Optimistic locking, multiple users can access the same record for edits. It checks that if another process has made any changes meanwhile its open for one process.An ActiveRecord::StaleObjectError exception is thrown for this and the update will be ignored.\r\n\r\nTo use optimistic locking, the table needs to have a integer column called lock_version. When the record is updated, Active Record will increments the lock_version column. If an update request is made with a lower value in the lock_version field than the current value of lock_version column in the database, the update request will fail with an ActiveRecord::StaleObjectError. Example:\r\n\r\n```Ruby\r\nu1 = User.find(1)\r\nu2 = User.find(1)\r\n\r\nu1.first_name = \"abc\"\r\nu1.save\r\n\r\nu2.name = \"efg\"\r\nu2.save # This will fail with an error\r\n```\r\n\r\nThe programmer then need to handle the situation after the exception rises.\r\n\r\n### Pessimistic Locking\r\n\r\nPessimistic locking uses a locking mechanism provided by the  database system. It lock exclusively the selected row and before finished by one process no other process cant read or write in this time.\r\n\r\n```Ruby\r\nUser.transaction do\r\n  u = User.lock.first\r\n  u.name = 'abc'\r\n  u.save!\r\nend\r\n```\r\n\r\n### How to test in rails\r\n\r\nFor developers concurrency is a hard thing to rightly implemented, and unfortunately it is much more complex to test as well. For this purpose, we’ll use the gem fork_break in rails which allows us to start subprocesses to execute our code, and synchronize them from the parent process using breakpoints.\r\n\r\nYou can read the documentation from here: https://github.com/forkbreak/fork_break\r\n\r\nmake sure to set use_transactional_fixtures to false in your rspec describe block.\r\n\r\n```Ruby\r\nself.use_transactional_fixtures = false\r\n```\r\n\r\nYou can wirte a function and use it to test any method with concurrent processes.\r\n\r\n```Ruby\r\ndef create_concurrent_calls(object, method, params=[])\r\n      processes = 2.times.map do |i|\r\n        ForkBreak::Process.new do |breakpoints|\r\n          original_method = object.method(method)\r\n          object.stub(method) do |*args|\r\n            value = original_method.call(*args)\r\n            breakpoints << method\r\n            value\r\n          end\r\n          object.send(method, *params)\r\n        end\r\n      end\r\n\r\n      processes.each{|process| process.run_until(method).wait}\r\n      processes.each{|process| process.finish.wait}\r\n    end\r\n```\r\n\r\nNow lets test one method in User model named transaction_method.\r\nA model rspec test would then be like :\r\n\r\n```Ruby\r\ndescribe \"User\" do\r\n  let!(:user){FactoryGirl.create :user}\r\n  context \"when concurrent calls to #transaction_method\" do\r\n    it \"should only make change once\" do\r\n      create_concurrent_calls(user, :transaction_method, [params])\r\n      expect(change_made).to eq(1)\r\n    end\r\n  end\r\nend\r\n```\r\n", slug: "activerecord-transactionlock-and-testing"},
  {created_at: 1.minutes.ago, title: "How to integrate custom bootstrap theme in Rails", body: "![images.jpg](http://blog.getbootstrap.com/img/2017/bootstrap-4-beta.png)\r\n\r\nNowadays, there are so many paid/free web templates/themes are available in the market. Once in awhile, a developer may needs to use them for their web apps. But most of the bootstrap themes that are available in the market don’t follow the Rails structure. I found a very few Rails theme in the market which surely not enough.\r\n\r\nIn this tutorial, I’ll pick a free bootstrap theme and give you a step by step walkthrough to integrate the theme in rails.\r\n\r\nFull code/Github Repo: https://github.com/mmkarim/custom-theme-rails\r\n\r\nTheme: A free one page responsive bootstrap theme from Start Bootstrap. You can download it from here: http://startbootstrap.com/template-overviews/grayscale/\r\n\r\n### Create a new project\r\n\r\nAt first I’ll create a new rails app by,\r\n\r\n```Powershell\r\nrails new custom_theme_rails -O\r\n```\r\n\r\nFor this project I don’t need anything to store in database. I append -O after my command so that Rails doesn’t include any database or ActiveRecord support for this project.\r\n\r\nThe Gemfile will automatically initialized with some basic gems. Let’s keep them unchanged for now. After removing the comments it should look something like this,\r\n\r\n```Ruby\r\nsource 'https://rubygems.org'\r\n\r\ngem 'rails', '4.2.6'\r\ngem 'sass-rails', '~> 5.0'\r\ngem 'uglifier', '>= 1.3.0'\r\ngem 'coffee-rails', '~> 4.1.0'\r\ngem 'jquery-rails'\r\ngem 'turbolinks'\r\ngem 'jbuilder', '~> 2.0'\r\ngem 'sdoc', '~> 0.4.0', group: :doc\r\n\r\ngroup :development do\r\n  gem 'web-console', '~> 2.0'\r\n  gem 'spring'\r\nend\r\n```\r\n\r\nNow I’ll make a controller with a index method. Let’s just named the controller  “Pages”.\r\n\r\n```Powershell\r\nrails g controller pages index\r\n```\r\n\r\nIt’ll make a controller and a view files along with some other files.\r\n\r\nLet’s initialize our project root for the index method.\r\n\r\n```Ruby\r\nRails.application.routes.draw do\r\n  root \"pages#index\"\r\nend\r\n```\r\n\r\nRun the “bundle install” command and run the rails server by “rails s”.\r\n\r\nIt should show the index page.\r\n\r\n![Screenshot from 2016-05-20 14:53:46.png](https://viblo.asia/uploads/562f5e97-1e69-4054-908b-17c1475b15ba.png)\r\n\r\nI’ll commit up to this as “Base Commit” and push it in the master branch.\r\nI’ll move to a new branch named integrate_index_file so that you  can see the changes clearly once integrate the html file.\r\n\r\n### Integrating html files\r\n\r\nNow, I’ll unzip the custom theme package. It has so many folders and one index.html file.\r\nThe first task is to copy the html code from this file into our app/views/layout/application.html.erb file. Copy the full index.html codes and replace all in our application.html.erb file.\r\n\r\n**Inside the `<head>` tag**,\r\n\r\nI’ll only change the content of `<title>` as “CustomThemeRails”. Just below this line, I’ll add this 3 ruby lines.\r\n\r\n```Ruby\r\n <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>\r\n <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>\r\n <%= csrf_meta_tags %>\r\n```\r\n\r\nThe first 2 lines are the default javascript and stylesheet reference tags which will ensure our turbolink support. And the last line is for the digital signature of the page.\r\n\r\n**Inside the `<body>` tag**,\r\n\r\nLet’s cut all the content inside the <body> </body> tags and paste them in the app/views/pages/index.html.erb file. Inside the `<body></body>` tags, I’ll just add this line,\r\n<%= yield %>\r\nThis will automatically yield all the content from the `index.html.erb` when this method will be called.\r\n\r\nThe primary works almost done. I’ll commit up to this as “Integrate Index file”. For better understanding you can check the difference between my last two commits here:\r\n\r\nhttps://github.com/mmkarim/custom-theme-rails/pull/1/files\r\n\r\nNow, if I reload our localhost it should look something like this,\r\n\r\n![Screenshot from 2016-05-20 15:14:40.png](https://viblo.asia/uploads/c2f33750-5327-437a-a617-42d2dd30e40f.png)\r\n\r\nDon’t get scared. We are not ready yet. We still need to add the custom stylesheet and javascript sources to our project.\r\n\r\n### Resolving the CSS and Javascript\r\n\r\nLet’s find out all the  stylesheet and javascript references that are mentioned in the html files first. Mostly they found in the `<head>` and at the end of the `<body>`.\r\n\r\nThe CSS references found in the `<head>` are,\r\n\r\n```HTML\r\n    <!-- Bootstrap Core CSS -->\r\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\r\n\r\n    <!-- Custom CSS -->\r\n    <link href=\"css/grayscale.css\" rel=\"stylesheet\">\r\n\r\n    <!-- Custom Fonts -->\r\n    <link href=\"font-awesome/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\">\r\n    <link href=\"http://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic\" rel=\"stylesheet\" type=\"text/css\">\r\n    <link href=\"http://fonts.googleapis.com/css?family=Montserrat:400,700\" rel=\"stylesheet\" type=\"text/css\">\r\n```\r\n\r\nAnd javascript references I found in the index.html.erb (bottom part):\r\n\r\n```HTML\r\n<!-- jQuery -->\r\n<script src=\"js/jquery.js\"></script>\r\n\r\n<!-- Bootstrap Core JavaScript -->\r\n<script src=\"js/bootstrap.min.js\"></script>\r\n\r\n<!-- Plugin JavaScript -->\r\n<script src=\"js/jquery.easing.min.js\"></script>\r\n\r\n<!-- Google Maps API Key - Use your own API key to enable the map feature. More information on the Google Maps API can be found at https://developers.google.com/maps/ -->\r\n<script type=\"text/javascript\" src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCRngKslUGJTlibkQ3FkfTxj3Xss1UlZDA&sensor=false\"></script>\r\n\r\n<!-- Custom Theme JavaScript -->\r\n<script src=\"js/grayscale.js\"></script>\r\n\r\n```\r\n\r\n Most of the references here we can solve by some gems. Let’s see how.\r\n\r\nFor bootstrap.min.css let’s use 'less-rails-bootstrap'. This gem has some dependency. It needs another gem 'therubyracer'. So add both gems in Gemfile.\r\n\r\n```Ruby\r\n  gem 'therubyracer'\r\n  gem 'less-rails-bootstrap'\r\n```\r\n\r\nAccording to the documentation of this gem, I need to specify about this at app/assets/javascripts/application.js just after jquery_ujs reference.\r\n\r\n```Ruby\r\n//= require twitter/bootstrap\r\n```\r\n\r\nAnd also specify in app/assets/stylesheets/application.css before require_tree .\r\n\r\n```Ruby\r\n *= require twitter/bootstrap\r\n```\r\n\r\nFor font-awesome.min.css we can use gem \"font-awesome-rails\". So let’s add this in Gemfile.\r\n\r\n```Ruby\r\n  gem \"font-awesome-rails\"\r\n```\r\n\r\nAnd specify it in the application.css before require_tree .\r\n\r\n```Ruby\r\n   *= require font-awesome\r\n```\r\n\r\nFor jquery.easing.min.js we’ll use the gem 'jquery-easing-rails'. Add this in Gemfile too.\r\n\r\n```Ruby\r\n  gem 'jquery-easing-rails'\r\n```\r\n\r\nAnd specify this at application.js\r\n\r\n```Ruby\r\n  //= require jquery.easing\r\n```\r\n\r\nSo finally application.js will looks like,\r\n\r\n```Ruby\r\n//= require jquery\r\n//= require jquery_ujs\r\n//= require jquery.easing\r\n//= require twitter/bootstrap\r\n//= require turbolinks\r\n//= require_tree .\r\n```\r\n\r\nAnd application.css will looks like,\r\n\r\n```Ruby\r\n *= require twitter/bootstrap\r\n *= require font-awesome\r\n *= require_tree .\r\n *= require_self\r\n */\r\n```\r\n\r\nNow there are some custom js, css and image files for this theme. Normally it’s good to keep external files in the vendor folder. It’ll keep you hassle free in the future, But for now, let’s keep it simple and use our assets folder.\r\n\r\nFor grayscale.js, copy it from the js folder of the theme and paste it in the app/assets/javascripts folder.\r\n\r\nFor grayscale.css, copy it from the css folder of the theme and paste it in the app/assets/stylesheets folder.\r\n\r\nFor the google map api, we can use javascript_include_tag. we need to place it before our javascript_include_tag for turbolink. In this way, it will load before grayscale.js can load.\r\n\r\n```Ruby\r\n   <%= javascript_include_tag \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCRngKslUGJTlibkQ3FkfTxj3Xss1UlZDA&sensor=false\" %>\r\n\r\n```\r\n\r\nFor the two font references, we can make another css files and add them there. For now, let’s not change anything else.\r\n\r\nThe last thing we need to do is place the images in the right places.\r\nCopy all the images from the img folder of the theme and paste them in the app/assets/images folder.\r\n\r\n**Next task is to find all the image references used in the css, js and view files.**\r\n\r\nOne of the good way is to find them using the global search tool of your Editor.\r\nFor SublimeText 2 or 3, Press Ctrl+Shift+f and search for “img/” (As the images were in the img folder). Try to skip the log or any unnecessary files from the search.\r\n\r\nI found 2 references in the grayscale.css in line 150 and 268. Let’s change the url\r\n\r\n“../img/intro-bg.jpg” will change into “intro-bg.jpg”\r\n\r\nAnd\r\n\r\n“../img/downloads-bg.jpg” will change into “downloads-bg.jpg”\r\n\r\n1 more reference found in the grayscale.js files in line 180.\r\n\r\nTo load the image from asset pipeline we need some ruby code to inject here. So we will rename the  grayscale.js files into grayscale.js.erb.\r\n\r\nThe image path 'img/map-marker.png' will change into \"<%= asset_path('map-marker.png') %>\"\r\n\r\nI’ll commit up to this. You can see the differences between my last two commits here for better understanding: https://github.com/mmkarim/custom-theme-rails/pull/2/files\r\n\r\nUpdate: Small modifications if you are going to deploy in production server. https://github.com/mmkarim/custom-theme-rails/compare/91690ad...506a2f4\r\n\r\nWe’re almost done. Let’s “bundle install” again and restart the server. If you refresh the localhost page in the browser it should works fine now. :)\r\n\r\n![Screenshot from 2016-05-23 13:16:53.png](https://viblo.asia/uploads/b4e0261d-7109-45a8-b5eb-226e8a31d272.png)\r\n\r\nWe’re done for now. But remember, for different theme there will be different dependencies. And you have to debug the issues as required. Try to keep the external js or css files in the vendor folder of your project and replace the raw html forms/navigations with rails syntax.\r\nLet’s talk about them in future. Till then, keep coding.\r\n\r\n", slug: "how-to-integrate-custom-bootstrap-theme-in-rails"}
])

Quote.create! text: "The most technologically efficient machine man has ever invented is the book.", name: "Northrop Frye"
Quote.create! text: "Technology is a word that describes something that doesn’t work yet.", name: "Douglas Adams"
Quote.create! text: "The human spirit must prevail over technology.", name: "Albert Einstein"
Quote.create! text: "Any sufficiently advanced technology is equivalent to magic.", name: "Sir Arthur C. Clarke"
